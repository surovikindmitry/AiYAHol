import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BotCommand

from config import config
from scheduler import HolidayScheduler
from logger import logger


class HolidayBot:
    """Telegram bot for posting daily holiday information"""
    
    def __init__(self):
        """Initialize the bot with all components"""
        # Create bot and dispatcher
        self.bot = Bot(token=config.BOT_TOKEN)
        self.dp = Dispatcher()
        
        # Create scheduler
        self.scheduler = HolidayScheduler(self.bot)
        
        # We'll set up commands later in the start method
    
    async def setup_commands(self):
        """Set up bot commands for display in Telegram interface"""
        commands = [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            BotCommand(command="post_now", description="–ó–∞–ø–æ—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö —Å–µ–π—á–∞—Å")
        ]
        await self.bot.set_my_commands(commands)
    
    def register_handlers(self):
        """Register message handlers"""
        # Start command handler
        @self.dp.message(Command("start"))
        async def start_command(message: types.Message):
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏ "
                "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
        
        # Help command handler
        @self.dp.message(Command("help"))
        async def help_command(message: types.Message):
            await message.answer(
                "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00 –ø—É–±–ª–∏–∫—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏ "
                "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Ö –≤ –∫–∞–Ω–∞–ª–µ.\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                "/help - –ü–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/post_now - –ó–∞–ø–æ—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n\n"
                "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç YandexGPT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –∏ "
                "–ø—É–±–ª–∏–∫—É–µ—Ç –µ—ë –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.",
                parse_mode="HTML"
            )
        
        # Post now command handler
        @self.dp.message(Command("post_now"))
        async def post_now_command(message: types.Message):
            await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö...")
            await self.scheduler.post_now()
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    
    async def start(self):
        """Start the bot and scheduler"""
        try:
            # Register handlers
            self.register_handlers()
            
            # Setup commands
            await self.setup_commands()
            
            # Start the scheduler
            self.scheduler.start()
            
            # Log successful start
            logger.info("Bot and scheduler started successfully")
            
            # Start polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.exception(f"Error starting bot: {str(e)}")
    
    async def stop(self):
        """Stop the bot and related services"""
        # Close bot session
        await self.bot.session.close()
        
        logger.info("Bot stopped")
