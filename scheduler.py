import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone

from config import config
from yandex_gpt import YandexGPT
from logger import logger


class HolidayScheduler:
    """Scheduler for daily holiday posts"""
    
    def __init__(self, bot):
        """Initialize scheduler
        
        Args:
            bot: Initialized Aiogram bot instance
        """
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.yandex_gpt = YandexGPT(
            api_key=config.YANDEX_API_KEY,
            folder_id=config.YANDEX_FOLDER_ID,
            model=config.GPT_MODEL
        )
        
        # Set timezone
        self.tz = timezone(config.TIMEZONE)
    
    def start(self):
        """Start the scheduler"""
        logger.info(f"Starting scheduler, set to run at {config.SCHEDULED_HOUR}:{config.SCHEDULED_MINUTE:02d} "
                    f"in {config.TIMEZONE} timezone")
        
        # Schedule the job to run daily at specified time
        self.scheduler.add_job(
            self.post_holiday_info,
            CronTrigger(
                hour=config.SCHEDULED_HOUR,
                minute=config.SCHEDULED_MINUTE,
                timezone=self.tz
            ),
            name="daily_holiday_post"
        )
        
        # Start the scheduler
        self.scheduler.start()
    
    async def post_holiday_info(self):
        """Query YandexGPT and post holiday information to the channel"""
        try:
            logger.info("Running scheduled task to post holiday information")
            
            # Get today's date in readable format
            today = datetime.now(self.tz).strftime("%d.%m.%Y")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            prompt = f"–°–µ–≥–æ–¥–Ω—è {today}. {config.HOLIDAY_PROMPT}"
            
            # Get holiday information from YandexGPT
            holiday_info = await self.yandex_gpt.get_holiday_info(prompt)
            
            if not holiday_info:
                logger.error("Failed to get holiday information from YandexGPT")
                # Notify about the error in the channel
                await self.bot.send_message(
                    chat_id=config.CHANNEL_ID,
                    text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –Ω–∞ {today}."
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç - –≤—ã–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            formatted_text = self._format_holiday_text(holiday_info)
            
            # Format the message
            message = f"üéâ <b>–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã</b> üìÖ {today}\n\n{formatted_text}"
            
            # Send the message to the channel
            await self.bot.send_message(
                chat_id=config.CHANNEL_ID,
                text=message,
                parse_mode="HTML"
            )
            
            logger.info(f"Successfully posted holiday information for {today}")
            
        except Exception as e:
            logger.exception(f"Error in scheduled task: {str(e)}")
            
    def _format_holiday_text(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏, –≤—ã–¥–µ–ª—è—è –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º.
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π (–æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ —Ç–∏—Ä–µ/–¥–µ—Ñ–∏—Å–∞)
        –∏ –≤—ã–¥–µ–ª—è–µ–º –∏—Ö —Ç–µ–≥–æ–º <b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞.
        """
        import re
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞" –Ω–∞ "- <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞</b>"
        text = re.sub(r'[-‚Äì‚Äî‚Ä¢‚óè]\s+([^\.,:;]+)', r'- <b>\1</b>', text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
        lines = text.split('\n')
        formatted_lines = []
        
        for line in lines:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ø—Ä–∞–∑–¥–Ω–∏–∫", "–¥–µ–Ω—å", "–¥–∞—Ç–∞", —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ –Ω–µ–π –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
            holiday_keywords = ["–ø—Ä–∞–∑–¥–Ω–∏–∫", "–¥–µ–Ω—å", "–¥–∞—Ç–∞", "–≥–æ–¥–æ–≤—â–∏–Ω–∞", "—Ñ–µ—Å—Ç–∏–≤–∞–ª—å", "–ø–∞–º—è—Ç"]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã 
            if "<b>" in line:
                formatted_lines.append(line)
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
            if any(keyword.lower() in line.lower() for keyword in holiday_keywords):
                # –ï—Å–ª–∏ –µ—Å—Ç—å ":" –≤ —Å—Ç—Ä–æ–∫–µ, –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
                if ":" in line:
                    parts = line.split(":", 1)
                    line = f"<b>{parts[0]}</b>:{parts[1]}"
                # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞, –≤—ã–¥–µ–ª—è–µ–º –≤—Å—é –µ—ë
                elif len(line.split()) < 7:
                    line = f"<b>{line}</b>"
                # –î–ª—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
                else:
                    match = re.match(r'^([^\.,:;]+)(.*)$', line)
                    if match:
                        line = f"<b>{match.group(1)}</b>{match.group(2)}"
            
            formatted_lines.append(line)
        
        return "\n".join(formatted_lines)
    
    async def post_now(self):
        """Manually trigger posting holiday information"""
        await self.post_holiday_info()
